package com.tb.directoryapp.controllers;


import com.tb.directoryapp.model.ConfirmationToken;
import com.tb.directoryapp.model.Sbjs;
import com.tb.directoryapp.model.Travelbetadmin;
import com.tb.directoryapp.repositories.ConfirmationTokenRepository;
import com.tb.directoryapp.mail_service.EmailSenderService;
import com.tb.directoryapp.services.SbjsService;
import com.tb.directoryapp.services.TravelbetadminService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;


@Controller
public class TravelbetaMailController {

    @Autowired
    private TravelbetadminService travelbetadminService;
    @Autowired
    private SbjsService sbjsService;
    @Autowired
    private EmailSenderService emailSenderService;
    @Autowired
    private ConfirmationTokenRepository confirmationTokenRepository;


    @GetMapping("/registration")
    public String registrationPage(Model model) {
        Travelbetadmin travelbetadmin = new Travelbetadmin();
        model.addAttribute("travelbetadmin", travelbetadmin);
        return "OnlineRegistration";
    }

    @PostMapping(value = "/registration")
    public String registerPortalUser(Travelbetadmin travelbetadmin, BindingResult result, Model model) {

        // Method in Service, from Repository  ===>   to prevent Duplicate Email entry.
        Travelbetadmin existingPortalUser = travelbetadminService.findByEmailIgnoreCase(travelbetadmin.getEmail());
        if (existingPortalUser != null) {
            result.rejectValue("email", null, "User already exists.");
        }

        // Method in Service, from Repository  ===>   to prevent Duplicate Username entry.
        existingPortalUser = travelbetadminService.findByUsernameIgnoreCase(travelbetadmin.getUsername());
        if (existingPortalUser != null) {
            result.rejectValue("username", null, "Username taken.");
        }

        // Checking for "errors" on the WebPage.
        if (result.hasErrors()) {
            return "OnlineRegistration";
        }

        // Save "User Account Details" inside Travelbetadmin Repo.
        travelbetadminService.saveOrUpdate(travelbetadmin);

        //  public ConfirmationToken(User user) {
        //      this.user = user;
        //      confirmationToken = UUID.randomUUID.toString();
        //  }
        //
        // Generate ConfirmationToken for this 'User'.
        ConfirmationToken confirmationToken = new ConfirmationToken(travelbetadmin);

        // "Details Saved" inside ConfirmationToken Repo, belonging to User whose ID Value,
        // is generated in accordance with ID Value of "Details Saved".
        confirmationTokenRepository.save(confirmationToken);

        // Ready JavaMail Sender to Send Mail
        SimpleMailMessage mailMessage = new SimpleMailMessage();

                          mailMessage.setTo(travelbetadmin.getEmail());
                          mailMessage.setSubject("Complete Registration!");
                          mailMessage.setFrom("igabriel.oyebanji@travelbeta.com");
                          mailMessage.setText("Dear " + travelbetadmin.getUsername() + "," + "\n" + "\n" +
                                              "Please verify your email address to complete your registration " +
                                              "http://localhost:8088/registration?token=" + confirmationToken.getConfirmationToken());

        // Send Mail to Registered User
        emailSenderService.sendEmail(mailMessage);

        // Notify User: "Registration was Successful."
        model.addAttribute("message", "A verification link has been sent to your email: " + travelbetadmin.getEmail());

        return "OnlineRegistration";
    }

    @RequestMapping(value = "/registration?token", method = {RequestMethod.GET, RequestMethod.POST})
    public String yesConfirmMyRegistration(Travelbetadmin travelbetadmin, @RequestParam("token") String confirmationToken) {

        // All Token Generated by ConfirmationToken-ENTITY, is Saved, inside ConfirmationToken Repo;
        // ConfirmationToken-ENTITY: Query your repository for the above "Token" I'm receiving.
        ConfirmationToken token = confirmationTokenRepository.findByConfirmationToken(confirmationToken);

        // "I recognise it." ...Okay check if "Token" is still valid
        if (token != null) {

                // "It is." ...Okay thank you.
                // Service Query Repository.
                travelbetadminService.findByEmail(token.getTravelbetadmin().getEmail());

                // Service.
                travelbetadminService.saveOrUpdate(travelbetadmin);

                // Method in Repository.
                confirmationTokenRepository.findByConfirmationToken(confirmationToken);

                return "redirect:/registration?token";
            }

        return "OnlineRegistration";
    }


    @PostMapping(value = "/registration.htm")
    public @ResponseBody
    Sbjs processAJAXRequest(
            @RequestParam("type") String type,
            @RequestParam("source") String source,
            @RequestParam("medium") String medium,
            @RequestParam("cmp") String cmp,
            @RequestParam("cnt") String cnt,
            @RequestParam("trm") String trm ) {

        System.out.println("TYPE here: " + type);
        System.out.println("SOURCE here: " + source);
        System.out.println("MEDIUM here: " + medium);
        System.out.println("CAMPAIGN here: " + cmp);
        System.out.println("CONTENT here: " + cnt);
        System.out.println("TERM here: " + trm);

        Sbjs sbjsPojo = new Sbjs();

        sbjsPojo.setType(type);
        sbjsPojo.setSource(source);
        sbjsPojo.setMedium(medium);
        sbjsPojo.setCampaign(cmp);
        sbjsPojo.setContent(cnt);
        sbjsPojo.setTerm(trm);

        System.out.println("*** Sourcebuster Parameters: HAS BEEN SENT TO DB ***");

        return sbjsService.saveOrUpdate(sbjsPojo);

    }
}
